{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["CommandInput","onAdd","onDelete","useState","visible","setVisible","input","setInput","inputRef","useRef","useEffect","handleKeyEvent","event","key","current","focus","document","body","addEventListener","removeEventListener","className","onSubmit","preventDefault","match","exec","trim","undefined","groups","cmd","arg","console","log","ref","value","onChange","e","target","slice","TwitchPlayer","memo","channel","Twitch","Embed","width","height","layout","destroy","id","App","Set","channels","setChannels","size","state","newState","add","delete","Array","from","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.425143c1.chunk.js","sourcesContent":["import { FormEventHandler, useEffect, useRef, useState, memo } from \"react\";\n\ntype CommandInputProps = {\n  onAdd: (channel: string) => void;\n  onDelete: (channel: string) => void;\n};\n\nconst CommandInput: React.FC<CommandInputProps> = ({ onAdd, onDelete }) => {\n  const [visible, setVisible] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    const handleKeyEvent = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case \":\":\n          setVisible(true);\n          inputRef.current?.focus();\n          break;\n        case \"Escape\":\n          setVisible(false);\n      }\n    };\n\n    document.body.addEventListener(\"keydown\", handleKeyEvent);\n    return () => {\n      document.body.removeEventListener(\"keydown\", handleKeyEvent);\n    };\n  }, []);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n\n    const match = /(?<cmd>[a-z]+)\\s+(?<arg>\\w+)/.exec(input.trim());\n\n    if (match !== null && match.groups !== undefined) {\n      switch (match.groups.cmd) {\n        case \"add\":\n          onAdd(match.groups.arg);\n          break;\n        case \"del\":\n          onDelete(match.groups.arg);\n          break;\n        default:\n          console.log(`Unkown command: \"${input}\"`);\n      }\n    }\n\n    setInput(\"\");\n  };\n\n  return visible ? (\n    <form className=\"fixed w-full\" onSubmit={handleSubmit}>\n      <input\n        className=\"w-full bg-black text-green-600\"\n        ref={inputRef}\n        value={input[0] === \":\" ? input : `:${input}`}\n        onChange={(e) => setInput(e.target.value.slice(1))}\n      />\n    </form>\n  ) : null;\n};\n\ntype TwitchPlayerProps = {\n  channel: string;\n  className: string;\n};\n\nconst TwitchPlayer: React.FC<TwitchPlayerProps> = memo(\n  ({ channel, className }) => {\n    const ref = useRef();\n\n    useEffect(() => {\n      // @ts-ignore\n      ref.current = new Twitch.Embed(channel, {\n        width: \"100%\",\n        height: \"100%\",\n        layout: \"video\",\n        channel,\n      });\n\n      return () => {\n        // @ts-ignore\n        ref.current?.destroy();\n      };\n    }, [channel]);\n\n    return <div id={channel} className={className}></div>;\n  }\n);\n\nfunction App() {\n  const [channels, setChannels] = useState<Set<string>>(() => new Set());\n\n  let layout: number[][];\n  switch (channels.size) {\n    case 1:\n      layout = [[12, 6]];\n      break;\n    case 2:\n      layout = [\n        [6, 6],\n        [6, 6],\n      ];\n      break;\n    case 3:\n      layout = [\n        [12, 3],\n        [6, 3],\n        [6, 3],\n      ];\n      break;\n    case 4:\n      layout = [\n        [6, 3],\n        [6, 3],\n        [6, 3],\n        [6, 3],\n      ];\n      break;\n    case 5:\n      layout = [\n        [6, 3],\n        [6, 3],\n        [4, 3],\n        [4, 3],\n        [4, 3],\n      ];\n      break;\n    case 6:\n      layout = [\n        [4, 3],\n        [4, 3],\n        [4, 3],\n        [4, 3],\n        [4, 3],\n        [4, 3],\n      ];\n      break;\n    case 7:\n      layout = [\n        [4, 3],\n        [4, 3],\n        [4, 3],\n        [3, 3],\n        [3, 3],\n        [3, 3],\n        [3, 3],\n      ];\n      break;\n    case 8:\n      layout = [\n        [3, 3],\n        [3, 3],\n        [3, 3],\n        [3, 3],\n        [3, 3],\n        [3, 3],\n        [3, 3],\n      ];\n      break;\n  }\n\n  return (\n    <>\n      <CommandInput\n        onAdd={(channel: string) => {\n          setChannels((state) => {\n            const newState = new Set(state);\n            if (newState.size < 8) {\n              newState.add(channel);\n            }\n            return newState;\n          });\n        }}\n        onDelete={(channel: string) => {\n          setChannels((state) => {\n            const newState = new Set(state);\n            newState.delete(channel);\n            return newState;\n          });\n        }}\n      />\n      <div className=\"h-screen grid grid-cols-12 grid-rows-6\">\n        {Array.from(channels).map((channel, i) => (\n          <TwitchPlayer\n            key={channel}\n            className={`col-span-${layout[i][0]} row-span-${layout[i][1]}`}\n            channel={channel}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}